---
apiVersion: v1
kind: Service
metadata:
  name: catalog
  labels:
    app: catalog
    service: catalog
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: catalog
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-v1
  labels:
    app: frontend-v1
    service: frontend-v1
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: frontend-v1
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-v2
  labels:
    app: frontend-v2
    service: frontend-v2
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: frontend-v2
---
apiVersion: v1
kind: Service
metadata:
  name: orders
  labels:
    app: orders
    service: orders
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: orders
---
apiVersion: v1
kind: Service
metadata:
  name: payment-history
  labels:
    app: payment-history
    service: payment-history
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: payment-history
---
apiVersion: v1
kind: Service
metadata:
  name: payments
  labels:
    app: payments
    service: payments
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: payments
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
    service: rabbitmq
spec:
  ports:
  - port: 5672
    name: tcp-rabbit
  selector:
    app: rabbitmq
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog
  labels:
    app: catalog
spec:
  replicas: 1
  selector:
    matchLabels:
      app: catalog
  template:
    metadata:
      labels:
        app: catalog
    spec:
      containers:
      - name: catalog
        image: btjimerson/catalog:0.1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: h2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-v1
  labels:
    app: frontend-v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-v1
  template:
    metadata:
      labels:
        app: frontend-v1
    spec:
      containers:
      - name: frontend-v1
        image: btjimerson/frontend:0.1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: APP_VERSION
          value: v1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-v2
  labels:
    app: frontend-v2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-v2
  template:
    metadata:
      labels:
        app: frontend-v2
    spec:
      containers:
      - name: frontend-v2
        image: btjimerson/frontend:0.1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: APP_VERSION
          value: v2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loadgenerator
spec:
  selector:
    matchLabels:
      app: loadgenerator
  replicas: 1
  template:
    metadata:
      labels:
        app: loadgenerator
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      restartPolicy: Always
      initContainers:
      - command:
        - /bin/sh
        - -exc
        - |
          echo "Init container pinging frontend: ${FRONTEND_ADDRESS}..."
          STATUSCODE=$(wget --server-response http://${FRONTEND_ADDRESS} 2>&1 | awk '/^  HTTP/{print $2}')
          if test $STATUSCODE -ne 200; then
              echo "Error: Could not reach frontend - Status code: ${STATUSCODE}"
              exit 1
          fi
        name: frontend-check
        image: busybox:latest
        env:
        - name: FRONTEND_ADDRESS
          value: "frontend-v1:8080"
      containers:
      - name: loadgenerator
        image: btjimerson/loadgenerator:0.1.0
        imagePullPolicy: 
        env:
        - name: FRONTEND_ADDRESS
          value: "frontend-v1:8080"
        - name: USERS
          value: "10"
        resources:
          requests:
            cpu: 300m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  labels:
    app: orders
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orders
  template:
    metadata:
      labels:
        app: orders
    spec:
      containers:
      - name: orders
        image: btjimerson/orders:0.1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        
        - name: SPRING_PROFILES_ACTIVE
          value: h2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-history
  labels:
    app: payment-history
spec:
  replicas: 1
  selector:
    matchLabels:
      app: payment-history
  template:
    metadata:
      labels:
        app: payment-history
    spec:
      containers:
      - name: payment-history
        image: btjimerson/payment-history:0.1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:        
        - name: SPRING_PROFILES_ACTIVE
          value: h2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payments
  labels:
    app: payments
spec:
  replicas: 1
  selector:
    matchLabels:
      app: payments
  template:
    metadata:
      labels:
        app: payments
    spec:
      containers:
      - name: payments
        image: btjimerson/payments:0.1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: STRIPE_API_KEY
          valueFrom:
            secretKeyRef:
              name: stripe-secret
              key: stripe-api-key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3
        imagePullPolicy: 
        ports:
        - containerPort: 5672
---